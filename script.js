console.log("JS Loaded ‚úÖ");

const svg = document.getElementById("mapSVG");
let viewBox = [14.6917, 11.9813, 262.4405, 482.3263]; // [x, y, width, height]
let isPanning = false;
let startPoint = [0, 0];

function updateViewBox() {
    svg.setAttribute("viewBox", viewBox.join(" "));
}

function zoomMap(factor) {
    const [x, y, width, height] = viewBox;
    const newWidth = width / factor;
    const newHeight = height / factor;
    const newX = x + (width - newWidth) / 2;
    const newY = y + (height - newHeight) / 2;

    viewBox = [newX, newY, newWidth, newHeight];
    updateViewBox();
}

function resetZoom() {
    viewBox = [14.6917, 11.9813, 262.4405, 482.3263];
    updateViewBox();
}

// üñ± Scroll zoom
svg.addEventListener("wheel", (e) => {
    e.preventDefault();
    const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;

    const [x, y, width, height] = viewBox;
    const rect = svg.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    const svgX = x + (mouseX / rect.width) * width;
    const svgY = y + (mouseY / rect.height) * height;

    const newWidth = width * zoomFactor;
    const newHeight = height * zoomFactor;
    const newX = svgX - (mouseX / rect.width) * newWidth;
    const newY = svgY - (mouseY / rect.height) * newHeight;

    viewBox = [newX, newY, newWidth, newHeight];
    updateViewBox();
});

// üñ± Drag
svg.addEventListener("mousedown", (e) => {
    isPanning = true;
    startPoint = [e.clientX, e.clientY];
});

svg.addEventListener("mousemove", (e) => {
    if (!isPanning) return;
    const dx = (e.clientX - startPoint[0]) * viewBox[2] / svg.clientWidth;
    const dy = (e.clientY - startPoint[1]) * viewBox[3] / svg.clientHeight;

    viewBox[0] -= dx;
    viewBox[1] -= dy;
    startPoint = [e.clientX, e.clientY];
    updateViewBox();
});

svg.addEventListener("mouseup", () => { isPanning = false; });
svg.addEventListener("mouseleave", () => { isPanning = false; });

// üì§ Share
const shareButton = document.getElementById("shareButton");
shareButton.addEventListener("click", async () => {
    if (navigator.share) {
        try {
            await navigator.share({
                title: 'SAKDEE Go+',
                text: '‡∏°‡∏≤‡∏î‡∏π‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á!',
                url: window.location.href
            });
        } catch (err) {
            alert("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå");
        }
    } else {
        try {
            await navigator.clipboard.writeText(window.location.href);
            alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå\n‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: " + window.location.href);
        } catch (err) {
            alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ");
        }
    }
});

// üó∫Ô∏è ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
const provinceNames = {
    "TH10": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "TH11": "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£", "TH12": "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ",
    "TH13": "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", "TH14": "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "TH15": "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á",
    "TH16": "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ", "TH17": "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ", "TH18": "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó", "TH19": "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ",
    "TH20": "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "TH21": "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "TH22": "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "TH23": "‡∏ï‡∏£‡∏≤‡∏î",
    "TH24": "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤", "TH25": "‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "TH26": "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å", "TH27": "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß",
    "TH30": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "TH31": "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "TH32": "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "TH33": "‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©",
    "TH34": "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ", "TH35": "‡∏¢‡πÇ‡∏™‡∏ò‡∏£", "TH36": "‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥", "TH37": "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç",
    "TH38": "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨", "TH39": "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π", "TH40": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "TH41": "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ",
    "TH42": "‡πÄ‡∏•‡∏¢", "TH43": "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢", "TH44": "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°", "TH45": "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î",
    "TH46": "‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå", "TH47": "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£", "TH48": "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°", "TH49": "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£",
    "TH50": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "TH51": "‡∏•‡∏≥‡∏û‡∏π‡∏ô", "TH52": "‡∏•‡∏≥‡∏õ‡∏≤‡∏á", "TH53": "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå",
    "TH54": "‡πÅ‡∏û‡∏£‡πà", "TH55": "‡∏ô‡πà‡∏≤‡∏ô", "TH56": "‡∏û‡∏∞‡πÄ‡∏¢‡∏≤", "TH57": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢",
    "TH58": "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô", "TH60": "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", "TH61": "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ", "TH62": "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£",
    "TH63": "‡∏ï‡∏≤‡∏Å", "TH64": "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", "TH65": "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å", "TH66": "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£",
    "TH67": "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå", "TH70": "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "TH71": "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "TH72": "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ",
    "TH73": "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°", "TH74": "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£", "TH75": "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "TH76": "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ",
    "TH77": "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå", "TH80": "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä", "TH81": "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà",
    "TH82": "‡∏û‡∏±‡∏á‡∏á‡∏≤", "TH83": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "TH84": "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ", "TH85": "‡∏£‡∏∞‡∏ô‡∏≠‡∏á",
    "TH86": "‡∏ä‡∏∏‡∏°‡∏û‡∏£", "TH90": "‡∏™‡∏á‡∏Ç‡∏•‡∏≤", "TH91": "‡∏™‡∏ï‡∏π‡∏•", "TH92": "‡∏ï‡∏£‡∏±‡∏á",
    "TH93": "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á", "TH94": "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ", "TH95": "‡∏¢‡∏∞‡∏•‡∏≤", "TH96": "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™"
};

const provinceSelect = document.getElementById("provinceSelect");
const tooltip = document.getElementById("tooltip");
const visitedList = document.getElementById("visitedProvincesList");

let visitedProvinces = JSON.parse(localStorage.getItem("visitedProvinces") || "[]");

function updateDropdown() {
    provinceSelect.innerHTML = `<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î --</option>`;
    for (const [id, name] of Object.entries(provinceNames)) {
        const option = document.createElement("option");
        option.value = id;
        option.textContent = name + (visitedProvinces.includes(id) ? " ‚úÖ" : "");
        provinceSelect.appendChild(option);
    }
}

function renderVisitedProvinces() {
    visitedList.innerHTML = "";
    if (visitedProvinces.length === 0) {
        visitedList.innerHTML = "<li>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</li>";
        return;
    }

    visitedProvinces.forEach(id => {
        const li = document.createElement("li");
        li.style.display = "flex";
        li.style.justifyContent = "space-between";
        li.style.alignItems = "center";
        li.style.padding = "4px 8px";
        li.style.borderBottom = "1px solid #ddd";

        const nameSpan = document.createElement("span");
        nameSpan.textContent = provinceNames[id] || id;

        const removeBtn = document.createElement("button");
        removeBtn.textContent = "‚ùå";
        removeBtn.title = "‡∏•‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ";
        removeBtn.style.background = "none";
        removeBtn.style.border = "none";
        removeBtn.style.color = "#cc0000";
        removeBtn.style.cursor = "pointer";
        removeBtn.style.fontSize = "16px";
        removeBtn.style.transition = "color 0.2s";

        removeBtn.addEventListener("click", () => {
            toggleProvince(id);
        });

        li.appendChild(nameSpan);
        li.appendChild(removeBtn);
        visitedList.appendChild(li);
        updateVisitedCount(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    });
}

function updateVisitedCount() {
    const count = visitedProvinces.length;
    const countText = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${count} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î`;
    document.getElementById("visitedCount").textContent = countText;
}

function toggleProvince(id) {
    const path = document.getElementById(id);
    if (!path) return;

    if (visitedProvinces.includes(id)) {
        visitedProvinces = visitedProvinces.filter(pid => pid !== id);
        path.classList.remove("visited");
    } else {
        visitedProvinces.push(id);
        path.classList.add("visited");
    }

    localStorage.setItem("visitedProvinces", JSON.stringify(visitedProvinces));
    updateDropdown();
    renderVisitedProvinces();
}

updateDropdown();
renderVisitedProvinces();

provinceSelect.addEventListener("change", () => {
    const selectedId = provinceSelect.value;
    if (selectedId) toggleProvince(selectedId);
});

document.querySelectorAll("svg path").forEach(path => {
    const id = path.id;
    if (visitedProvinces.includes(id)) {
        path.classList.add("visited");
    }

    path.addEventListener("click", () => toggleProvince(id));
    path.addEventListener("mousemove", (e) => {
        tooltip.style.display = "block";
        tooltip.style.left = (e.pageX + 10) + "px";
        tooltip.style.top = (e.pageY + 10) + "px";
        tooltip.textContent = provinceNames[id];
    });
    path.addEventListener("mouseleave", () => {
        tooltip.style.display = "none";
    });
});

document.getElementById("clearButton").addEventListener("click", () => {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?")) {
        visitedProvinces = [];
        localStorage.removeItem("visitedProvinces");

        document.querySelectorAll("svg path.visited").forEach(path => {
            path.classList.remove("visited");
        });

        updateDropdown();
        renderVisitedProvinces();
        updateVisitedCount();
    }
});


function getCleanSVGBlob(svgElement) {
    const clone = svgElement.cloneNode(true);

    // ‡πÉ‡∏™‡πà inline style ‡πÉ‡∏´‡πâ path ‡∏ó‡∏µ‡πà‡∏°‡∏µ class
    clone.querySelectorAll("path").forEach(path => {
        if (path.classList.contains("visited")) {
            path.setAttribute("fill", "#459bec"); // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            path.setAttribute("stroke", "#ffffff");
        } else {
            path.setAttribute("fill", "#ccc"); // ‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥
            path.setAttribute("stroke", "#999");
        }
    });

    const serializer = new XMLSerializer();
    const svgString = serializer.serializeToString(clone);
    return new Blob([svgString], { type: "image/svg+xml;charset=utf-8" });
}



document.getElementById("exportCustomImage").addEventListener("click", () => {
    const canvas = document.getElementById("customCanvas");
    const ctx = canvas.getContext("2d");

    const width = canvas.width;
    const height = canvas.height;

    const padding = 20;
    const columnGap = 30;
    const leftWidth = 450;
    const rightWidth = width - leftWidth - columnGap - padding * 1;

    const svgElement = document.getElementById("mapSVG");
    const visitedItems = document.querySelectorAll("#visitedProvincesList li");
    const countText = document.getElementById("visitedCount").textContent;



    document.fonts.ready.then(() => {
        // 1. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        ctx.fillStyle = "#ffffff";
        ctx.fillRect(0, 0, width, height);

        // 2. ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        ctx.fillStyle = "#459bec";
        ctx.font = "bold 60px 'IBM Plex Sans Thai'";
        ctx.fillText("SAKDEE Go+", padding + 20, 100);

        ctx.fillStyle = "#000000FF";
        ctx.font = "32px 'IBM Plex Sans Thai'";
        ctx.fillText("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡πâ‡∏≤‡∏á", padding + 20, 150);

        // 3. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        ctx.fillStyle = "#444";
        ctx.font = "20px 'IBM Plex Sans Thai'";
        ctx.fillText(countText, padding + 40, 190);

        // 4. ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        ctx.fillStyle = "#AFAFAFFF";
        ctx.font = "18px 'IBM Plex Sans Thai'";

// ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const names = Array.from(visitedItems).map(li =>
  li.textContent.replace(/‚ùå/g, '').trim()
);
const allText = names.join(", ");

// ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡∏∞ ~50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ)
const lines = allText.match(/.{1,50}(,|$)/g); // ‡∏ï‡∏±‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ

// ‡∏ß‡∏≤‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
lines.forEach((line, i) => {
  ctx.fillText(line.trim(), padding + 40, 220 + i * 30);
});

        // 5. ‡∏ß‡∏≤‡∏î SVG ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤)
        const svgElement = document.getElementById("mapSVG");
        const svgBlob = getCleanSVGBlob(svgElement);
        const url = URL.createObjectURL(svgBlob);
        const img = new Image();


         
        img.onload = () => {
            ctx.drawImage(
              img,
              leftWidth + columnGap,
              padding,
              rightWidth,
              height - padding * 4.5
            );
          
            URL.revokeObjectURL(url);
          
            const logo = new Image();
            logo.onload = () => {
              // ‚úÖ ‡∏ß‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
              ctx.drawImage(logo, 0, 1000-95);  // ‚Üê ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          
              // ‚úÖ ‡∏Ñ‡πà‡∏≠‡∏¢ export ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ
              const link = document.createElement("a");
              link.download = "sakdee-visited-map.png";
              link.href = canvas.toDataURL("image/png");
              link.click();
            };
            logo.src = "./scr/img/Frame1.png"; // ‡∏ï‡∏£‡∏ß‡∏à path ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå
          };
        img.src = url;
    });
});
